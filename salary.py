# AUTOGENERATED! DO NOT EDIT! File to edit: 95_salary_negotiations.ipynb (unless otherwise specified).

__all__ = ['get_uk_takehome_salary', 'USD2GBP', 'get_salary_bands', 'df', 'get_salary_figure', 'TOOLTIPS',
           'test_tooltips', 'p']

# Cell
from matplotlib import pyplot as plt
import pandas as pd
import numpy as np
from bokeh.palettes import brewer
from bokeh.plotting import ColumnDataSource, figure, output_file, show
import bokeh as bk

# Cell
USD2GBP = 0.8
# depending on the salary and bands, calculate the takehome salary adding the tax free amount
# TODO: factor in National insurance


def get_uk_takehome_salary(gbp_salary):
    basic = (12_571, 50_270) # 20%
    higher = (50_271, 150_000) # 40%
    additional = (150_001, 999_000) # 45%

    # calculate the tax free amount
    tax_free = min([max([12_570 - (gbp_salary - 100_000)/2, 0]), 12_570])

    income = {
        'tax_free': tax_free,
        'basic': 0,
        'higher': 0,
        'additional': 0
        }
    if gbp_salary > basic[0]:
        relevant_section = min([basic[1], gbp_salary])
        income['basic'] = min([relevant_section - tax_free, basic[1]]) * 0.8
    if gbp_salary > higher[0]:
        relevant_section = min([higher[1], gbp_salary])
        income['higher'] = min([relevant_section - basic[1], higher[1]]) * 0.6
    if gbp_salary > additional[0]:
        relevant_section = min([additional[1], gbp_salary])
        income['additional'] = int(min([relevant_section - higher[1], additional[1]]) * 0.55)

    taxes = {
        "taxes_basic": int(income['basic'] * 0.2),
        "taxes_higher": int(income['higher'] * 0.4),
        "taxes_additional": int(income['additional'] * 0.45),
        "taxes_free": int(min([ 12_570 - tax_free, 12_570]) * 0.2)
    }
    # merge the two lists
    return {**income, **taxes}


get_uk_takehome_salary(245_000)

# Cell
def get_salary_bands(salary):
    smin, smax = max(salary - 100_000, 0), salary + 140_000
    salaries = [ get_uk_takehome_salary(x) for x in range(smin, smax, 1000) ]
    df = pd.DataFrame(salaries)
    return df

df = get_salary_bands(100_000)

# Cell
TOOLTIPS = [
    ("tax_free", "@tax_free"),
    ("basic", "@basic"),
    ("higher", "@higher"),
    ("additional", "@additional"),
    ("taxes_basic", "@taxes_basic"),
    ("taxes_higher", "@taxes_higher"),
    ("taxes_additional", "@taxes_additional"),
    ("taxes_free", "@taxes_free")
]

def get_salary_figure(df, TOOLTIPS=TOOLTIPS):
    # output_file('salary.html')
    p = figure(x_axis_label='Salary (£K)', y_axis_label='Salary Decomposition',
               title='UK Takehome Salary', plot_width=800, plot_height=600,
               tooltips=TOOLTIPS, toolbar_location='below')
    hover_tool = bk.models.HoverTool(tooltips=TOOLTIPS)

    # source = ColumnDataSource(df.to_dict())
    colors = brewer['Spectral'][10][:4] + brewer['Spectral'][10][-4:]

    p.varea_stack(stackers=df.columns, x='index',
                  color=colors, legend_label=list(df.columns), source=df)
    p.legend.location = 'top_left'
    p.toolbar.active_drag = None
    
    p.yaxis.ticker = list(range(0, 250_000, 50_000))
    p.yaxis[0].formatter = bk.models.NumeralTickFormatter(format="0,0 £")

    return p


# Cell

def test_tooltips():
    df = pd.DataFrame(
        {
            "name": ['foo','bar'],
            "kpi1": [1,2],
            "kpi2": [2,1]
        }
    )

    # Create a ColumnDataSource from df: source
    source = ColumnDataSource(df)

    # Create the figure: p
    p = figure(tools=["hover"])

    # Add circle glyphs to the figure p
    p.circle('kpi1', 'kpi2', source= source)
    hover = bk.models.HoverTool(tooltips=[("index", "@index"),
        ('Name', '@name')])

    p.add_tools(hover)
    return p

p = test_tooltips()